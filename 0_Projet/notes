

        
        if maximizingPlayer:
            value = -math.inf
            turn = 1
        else:
            value = math.inf
            turn = -1

        for noeud_libre in position["neighbour"]:
            if (noeud_libre["color"] == BRWON):
                b_copy = copy.deepcopy(noeud_libre)

                self.drop_piece(b_copy, noeud, self._game._turn * turn)
                new_score = self.minimax(
                    b_copy, depth - 1, alpha, beta, not maximizingPlayer, pruning
                )[1]

                if maximizingPlayer:
                    if new_score > value:
                        value = new_score
                    noeud = noeud_libre
                    alpha = max(alpha, value)
                else:
                    if new_score < value:
                        value = new_score
                        noeud = noeud_libre
                    beta = min(beta, value)

                if pruning:
                    if alpha >= beta:
                        break
            else: 
                break